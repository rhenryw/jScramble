Name: info-section
CSS: |
  [data-bit="info-section"] {
    max-width: 980px;
    margin: 4rem auto;
    padding: 2rem;
  }
  [data-bit="info-section"] h2 {
    text-align: center;
    font-size: clamp(2rem, 5vw, 3rem);
    font-weight: 800;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, #3B82F6, #8B5CF6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  [data-bit="info-section"] .intro {
    text-align: center;
    color: #9CA3AF;
    font-size: 1.125rem;
    margin-bottom: 3rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  [data-bit="info-section"] .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 3rem;
  }
  [data-bit="info-section"] .card {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(139, 92, 246, 0.05));
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 16px;
    padding: 2rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  [data-bit="info-section"] .card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #3B82F6, #8B5CF6, #EC4899);
    transform: translateX(-100%);
    transition: transform 0.5s ease;
  }
  [data-bit="info-section"] .card:hover::before {
    transform: translateX(0);
  }
  [data-bit="info-section"] .card:hover {
    transform: translateY(-10px);
    border-color: rgba(59, 130, 246, 0.5);
    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.2);
  }
  [data-bit="info-section"] .card h3 {
    color: #3B82F6;
    font-size: 1.5rem;
    margin: 0 0 1rem;
    font-weight: 700;
  }
  [data-bit="info-section"] .card p {
    color: #CBD5E1;
    line-height: 1.7;
    margin: 0.75rem 0;
  }
  [data-bit="info-section"] .card code {
    background: rgba(59, 130, 246, 0.1);
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-family: 'Monaco', 'Menlo', monospace;
    font-size: 0.9em;
    color: #60A5FA;
  }
  [data-bit="info-section"] .usage {
    background: #0F172A;
    border-radius: 12px;
    padding: 2rem;
    margin: 3rem 0;
    border: 1px solid rgba(59, 130, 246, 0.2);
  }
  [data-bit="info-section"] .usage h3 {
    color: #3B82F6;
    margin-top: 0;
    font-size: 1.25rem;
  }
  [data-bit="info-section"] .usage pre {
    background: rgba(0, 0, 0, 0.3);
    padding: 1.5rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1rem 0;
    border-left: 4px solid #3B82F6;
  }
  [data-bit="info-section"] .usage code {
    color: #E2E8F0;
    font-family: 'Monaco', 'Menlo', monospace;
    font-size: 0.9rem;
  }
JS: |
  const { container, config } = ctx;
  
  const section = document.createElement('div');
  
  const title = document.createElement('h2');
  title.textContent = config.title || 'How It Works';
  section.appendChild(title);
  
  const intro = document.createElement('p');
  intro.className = 'intro';
  intro.textContent = config.intro || 'jScramble provides military-grade JSON obfuscation for your web applications.';
  section.appendChild(intro);
  
  const grid = document.createElement('div');
  grid.className = 'grid';
  
  const cards = config.cards || [
    {
      title: 'AES-GCM Encryption',
      content: 'Encrypts your entire JSON payload using AES-GCM with a randomly generated key and IV. This ensures that both keys and values are completely protected.'
    },
    {
      title: 'Unicode Escaping',
      content: 'Applies aggressive unicode-escaping to approximately 5/6 of characters using a seeded PRNG, making the output extremely difficult to read and analyze.'
    },
    {
      title: 'Junk Injection',
      content: 'Adds fake strings to the output JSON that are automatically ignored by the runtime, further obscuring the actual data structure.'
    }
  ];
  
  cards.forEach(card => {
    const cardEl = document.createElement('div');
    cardEl.className = 'card';
    
    const h3 = document.createElement('h3');
    h3.textContent = card.title;
    cardEl.appendChild(h3);
    
    const p = document.createElement('p');
    p.innerHTML = card.content;
    cardEl.appendChild(p);
    
    grid.appendChild(cardEl);
  });
  
  section.appendChild(grid);
  
  // Usage section
  const usage = document.createElement('div');
  usage.className = 'usage';
  usage.innerHTML = `
    <h3>Installation & Usage</h3>
    <pre><code># Run directly with npx
npx --yes . ob test.json

# Or use npm script
npm run ob -- test.json</code></pre>
    <h3>Browser Integration</h3>
    <pre><code>&lt;script src="/path/to/read.js"&gt;&lt;/script&gt;
&lt;script&gt;
  fetch('/path/to/test-ob.json')
    .then(r => r.json())
    .then(async ob => {
      const data = await window.jscramble.read(ob);
      console.log('Decrypted JSON:', data);
    });
&lt;/script&gt;</code></pre>
  `;
  section.appendChild(usage);
  
  container.appendChild(section);
